{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///./module.ts","webpack:///./datasource.ts","webpack:///./convertutils.ts","webpack:///./atsd_client.ts","webpack:///./query_ctrl.ts","webpack:///external \"app/plugins/sdk\"","webpack:///./config_ctrl.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","default","object","property","prototype","hasOwnProperty","p","s","e","__WEBPACK_EXTERNAL_MODULE__0__","_query_ctrl","_config_ctrl","ChangeMyNameAnnotationsQueryCtrl","templateUrl","Datasource","_datasource2","QueryCtrl","AtsdQueryCtrl","ConfigCtrl","ChangeMyNameConfigCtrl","AnnotationsQueryCtrl","_convertutils","_atsd_client","DatasourceType","ATSD","AS","AtsdDatasource","instanceSettings","backendSrv","templateSrv","$q","this","client","AtsdClient","proxyUrl","url","basicAuth","$inject","query","options","_this","start","_convertToAtsdTime","range","from","end","to","qs","_lodash2","each","targets","target","disconnect","push","_convertTargetToQuery","queries","compact","isEmpty","defer","resolve","data","promise","groupByTags","tags","val","_performTimeSeriesQuery","then","response","result","map","_transformMetricData","sort","a","b","nameA","toLowerCase","nameB","tsQueries","entity","metric","implicit","tagCombos","group","en","tags_1","startDate","endDate","limit","timeFormat","aggregate","aggregation","k","length","querySeries","getEntities","entities","getMetrics","metrics","getMetricSeries","metricSeries","getVersion","version","testDatasource","status","message","title","hide","replace","type","convertTags","_convertToSeconds","_parsePeriod","date","Date","_datemath","parse","toISOString","period","count","unit","metricData","dps","item","v","datapoints","interval","grafanaTags","forEach","transport","baseSettings","entityName","method","baseRequest","catch","Error","metricName","q","datasourceRequest","mixinBaseOptions","cOptions","request","resp","__assign","headers","fullUrl","part","substr","BASE_URL","iterator","constructor","setPrototypeOf","__proto__","Array","_super","$scope","$injector","suggest","types","aggregateOptions","units","unitOptions","keys","values","segments","tagEditor","editIndex","state","isLoaded","showAggregation","tagRow","isEdit","canAdd","entityBlur","_typeof","selected","datasource","err","console","log","__extends","aggregateTypes","label","toUpperCase","refresh","metricBlur","suggestTags","tagRemove","index","splice","tagEdit","tagMouseover","tagMouseleave","saveTag","editorValue","removeAllTags","closeTagEditor","showTagEditor","series","indexOf"],"mappings":"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","file":"module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import AtsdDatasource from './datasource';\nimport {AtsdQueryCtrl} from './query_ctrl';\nimport {ChangeMyNameConfigCtrl} from './config_ctrl';\n\nclass ChangeMyNameAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  AtsdDatasource as Datasource,\n  AtsdQueryCtrl as QueryCtrl,\n  ChangeMyNameConfigCtrl as ConfigCtrl,\n  ChangeMyNameAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\nimport {_convertToAtsdTime, _convertToSeconds, _parsePeriod, _transformMetricData, convertTags} from './convertutils';\nimport {BackendSrv} from 'grafana/app/core/services/backend_srv';\nimport {AtsdClient, Entity} from './atsd_client';\n\n\nexport enum DatasourceType {\n  ATSD, AS\n}\n\nexport default class AtsdDatasource {\n\n  private readonly client: AtsdClient;\n\n  /** @ngInject */\n  constructor(instanceSettings, private backendSrv: BackendSrv, private templateSrv, private $q) {\n    this.client = new AtsdClient(this.backendSrv, {\n      proxyUrl: instanceSettings.url,\n      basicAuth: instanceSettings.basicAuth,\n    });\n  }\n\n\n  query(options) {\n    const start = _convertToAtsdTime(options.range.from);\n    const end = _convertToAtsdTime(options.range.to);\n    const qs: any[] = [];\n\n    _.each(options.targets, target => {\n      target.disconnect = options.targets[0].disconnect;\n      qs.push(this._convertTargetToQuery(target));\n    });\n\n    const queries = _.compact(qs);\n\n    if (_.isEmpty(queries)) {\n      const d = this.$q.defer();\n      d.resolve({data: []});\n      return d.promise;\n    }\n\n    const groupByTags = {};\n\n    _.each(queries, query => {\n      _.each(query.tags, (val, key) => {\n        groupByTags[key] = true;\n      });\n    });\n\n    return this._performTimeSeriesQuery(queries, start, end).then(response => {\n      if (response.data === undefined) {\n        return {data: []};\n      }\n      const result = response.data.map(_transformMetricData);\n      result.sort((a, b) => {\n        const nameA = a.target.toLowerCase();\n        const nameB = b.target.toLowerCase();\n\n        if (nameA < nameB) {\n          return -1;\n        } else if (nameA > nameB) {\n          return 1;\n        } else {\n          return 0;\n        }\n      });\n      return {data: result};\n    });\n  }\n\n  private _performTimeSeriesQuery(queries, start, end) {\n    const tsQueries: any[] = [];\n\n    _.each(queries, query => {\n      if (query.entity !== '' && query.metric !== '') {\n        if (query.implicit) {\n          if (query.tagCombos !== undefined) {\n            _.each(query.tagCombos, group => {\n              if (group.en) {\n                const tags = {};\n\n                _.each(group.data, (value, key) => {\n                  tags[key] = [value];\n                });\n\n                tsQueries.push({\n                  startDate: start,\n                  endDate: end,\n                  limit: 10000,\n                  entity: query.entity,\n                  metric: query.metric,\n                  tags: tags,\n                  timeFormat: 'milliseconds',\n                  aggregate: query.aggregation,\n                });\n              }\n            });\n          }\n        } else {\n          const tags = {};\n\n          for (const k in query.tags) {\n            tags[k] = query.tags[k];\n          }\n\n          tsQueries.push({\n            startDate: start,\n            endDate: end,\n            limit: 10000,\n            entity: query.entity,\n            metric: query.metric,\n            tags: tags,\n            timeFormat: 'milliseconds',\n            aggregate: query.aggregation,\n          });\n        }\n      }\n    });\n\n    if (tsQueries.length === 0) {\n      const d = this.$q.defer();\n      d.resolve({data: undefined});\n      return d.promise;\n    }\n\n    return this.client.querySeries(tsQueries);\n  }\n\n  getEntities(): Promise<Array<Entity>> {\n    return this.client.entities();\n  }\n\n  getMetrics(entity) {\n    return this.client.metrics(entity);\n  }\n\n  getMetricSeries(metric) {\n    return this.client.metricSeries(metric);\n  }\n\n  getVersion() {\n    return this.client.version();\n  }\n\n  testDatasource() {\n    return this.client.version().then(() => ({\n      status: 'success',\n      message: 'Data source is working',\n      title: 'Success',\n    }));\n  }\n\n  private _convertTargetToQuery(target) {\n    if (!target.metric || !target.entity || target.hide) {\n      return null;\n    }\n    return {\n      entity: this.templateSrv.replace(target.entity),\n      metric: this.templateSrv.replace(target.metric),\n      aggregation: target.aggregation.type !== undefined ? target.aggregation : undefined,\n      tags: convertTags(target.tags),\n      disconnect:\n        target.disconnect !== undefined && target.disconnect !== ''\n          ? _convertToSeconds(_parsePeriod(target.disconnect))\n          : 24 * 60 * 60,\n    };\n  }\n}\n","import {parse} from 'grafana/app/core/utils/datemath';\nimport _ from 'lodash';\n\nexport function _convertToAtsdTime(date: any) {\n  date = date !== 'now' ? date : new Date();\n  date = parse(date);\n\n  return date.toISOString();\n}\n\nexport function _parsePeriod(period) {\n  return {count: period.count, unit: period.unit};\n}\n\nexport function _transformMetricData(metricData) {\n  const dps = _.map(metricData.data, function(item) {\n    return [item.v, item.t];\n  });\n  let name = metricData.entity + ': ' + metricData.metric;\n  _.each(metricData.tags, (value, key) => {\n    name += `, ${key}=${value}`;\n  });\n  return {target: name, datapoints: dps};\n}\n\nexport function _convertToSeconds(interval) {\n  let count = interval.count;\n\n  switch (interval.unit) {\n    case 'YEAR':\n      count *= 365 * 24 * 60 * 60;\n      break;\n    case 'MONTH':\n      count *= 30 * 24 * 60 * 60;\n      break;\n    case 'WEEK':\n      count *= 7 * 24 * 60 * 60;\n      break;\n    case 'DAY':\n      count *= 24 * 60 * 60;\n      break;\n    case 'HOUR':\n      count *= 60 * 60;\n      break;\n    case 'MINUTE':\n      count *= 60;\n      break;\n    case 'SECOND':\n      break;\n    default:\n      count = 0;\n  }\n\n  return count;\n}\n\nexport interface GrafanaTag {\n  key: string;\n  value: string;\n}\n\nexport function convertTags(grafanaTags: Array<GrafanaTag>) {\n  const tags = {};\n  grafanaTags.forEach(item => {\n    if (tags[item.key]) {\n      tags[item.key].push(item.value);\n    } else {\n      tags[item.key] = [item.value];\n    }\n  });\n  return tags;\n}\n","export interface HttpTransport {\n  get(url: any, params?: any): any;\n\n  delete(url: any): any;\n\n  post(url: any, data: any): any;\n\n  patch(url: any, data: any): any;\n\n  put(url: any, data: any): any;\n\n  request(options: any): any;\n\n  datasourceRequest(options: any): any;\n}\n\ninterface Metric {\n  name: string;\n}\n\nexport interface Entity {\n  name: string;\n}\n\ninterface BaseSettings {\n  basicAuth: string;\n  proxyUrl: string;\n}\n\ninterface AtsdVersion {\n  buildInfo: {\n    revisionNumber: string;\n    hbaseVersion?: string;\n  };\n}\n\nexport interface SeriesFilter {\n  entity: string;\n  metric: string;\n  startDate: string;\n  endDate: string;\n  limit: number;\n  tags?: {[key: string]: string[]};\n  timeFormat: string;\n  aggregate: any;\n}\n\nexport interface Series {\n}\n\nexport class AtsdClient {\n  private static readonly BASE_URL = 'api/v1/';\n\n  constructor(private transport: HttpTransport, private baseSettings: BaseSettings) {\n  }\n\n  metrics(entityName: string): Promise<Array<Metric>> {\n    const options = {\n      method: 'GET',\n      url: `entities/${entityName}/metrics`,\n    };\n\n    return this.baseRequest(options);\n  }\n\n  entities(): Promise<Array<Entity>> {\n    return this.baseRequest({\n      method: 'GET',\n      url: `entities`,\n    });\n  }\n\n  version(): Promise<AtsdVersion> {\n    return this.baseRequest({\n      method: 'GET',\n      url: 'version',\n    }).catch(() => {\n      throw new Error('Failed to execute test query!');\n    });\n  }\n\n  metricSeries(metricName): Promise<any> {\n    return this.baseRequest({\n      method: 'GET',\n      url: `metrics/${metricName}/series`,\n    });\n  }\n\n  querySeries(q: any[]): Promise<any[]> {\n    return this.transport.datasourceRequest(this.mixinBaseOptions({\n      url: 'series/query',\n      method: 'POST',\n      data: q,\n    }));\n  }\n\n  private baseRequest(options): Promise<any> {\n    const cOptions = this.mixinBaseOptions(options);\n    return this.transport.request(cOptions).then(resp => {\n      return resp;\n    });\n  }\n\n  private mixinBaseOptions(options) {\n    return {\n      ...options,\n      headers: {\n        basicAuth: this.baseSettings.basicAuth,\n      },\n      url: this.fullUrl(options.url),\n    };\n  }\n\n  private fullUrl(part) {\n    const url = this.baseSettings.proxyUrl;\n    const fullUrl = url[url.length - 1] !== '/' ? `${url}/` : url;\n    if (!(part.length <= 0 || part[0] !== '/')) {\n      part = part.substr(1, part.length - 1);\n    }\n    return fullUrl + AtsdClient.BASE_URL + part;\n  }\n}\n","import _ from 'lodash';\nimport {QueryCtrl} from 'grafana/app/plugins/sdk';\n\ninterface Suggestion {\n  metrics: string[];\n  entities: string[];\n  aggregation: {\n    types: any;\n    period: {units: any};\n  };\n  tags: {\n    keys: Array<any>;\n    values: any[];\n  };\n}\n\ninterface State {\n  isLoaded: boolean;\n  showAggregation: boolean;\n  tagRow: {\n    isEdit: boolean;\n    canAdd: boolean;\n    tags: any[];\n  };\n}\n\ninterface Segment {\n  tagEditor: {\n    editIndex: number | undefined;\n    key: string | undefined;\n    value: string | undefined;\n  };\n}\n\ninterface Metric {\n  name: string;\n}\n\nexport class AtsdQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n  private suggest: Suggestion;\n  private segments: Segment;\n  private state: State;\n\n  /** @ngInject */\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    this.suggest = {\n      metrics: [],\n      entities: [],\n      aggregation: {\n        types: AtsdQueryCtrl.aggregateOptions(),\n        period: {\n          units: AtsdQueryCtrl.unitOptions(),\n        },\n      },\n      tags: {\n        keys: [],\n        values: [],\n      },\n    };\n\n    this.segments = {\n      tagEditor: {\n        editIndex: undefined,\n        key: undefined,\n        value: undefined,\n      },\n    };\n\n    this.state = {\n      isLoaded: true,\n      showAggregation: false,\n      tagRow: {\n        isEdit: false,\n        canAdd: true,\n        tags: [],\n      },\n    };\n\n    if (this.target.entity) {\n      this.entityBlur();\n    }\n\n    if (typeof this.target.tags !== 'object') {\n      this.target.tags = [];\n    } else {\n      for (let i = 0; i < this.target.tags.length; i++) {\n        this.state.tagRow.tags.push({selected: false});\n      }\n    }\n    this.target.entity = this.target.entity ? this.target.entity : undefined;\n    this.target.metric = this.target.metric ? this.target.metric : undefined;\n    this.target.aggregation = this.target.aggregation\n      ? this.target.aggregation\n      : {\n        type: this.suggest.aggregation.types[0].value,\n        period: {\n          count: 1,\n          unit: this.suggest.aggregation.period.units[3].value,\n        },\n      };\n\n    this.suggest.entities = [];\n    this.datasource\n      .getEntities()\n      .then(result => {\n        result.forEach(item => this.suggest.entities.push(item.name));\n        this.state.isLoaded = false;\n      })\n      .catch(err => console.log(err));\n    this.datasource.getVersion()\n      .then(v => this.state.showAggregation = !!v.buildInfo.hbaseVersion);\n  }\n\n  private static aggregateOptions() {\n    const aggregateTypes = [\n      undefined,\n      'Count',\n      'Min',\n      'Max',\n      'Avg',\n      'Median',\n      'Sum',\n      'Percentile_999',\n      'Percentile_995',\n      'Percentile_99',\n      'Percentile_95',\n      'Percentile_90',\n      'Percentile_75',\n      'First',\n      'Last',\n      'Delta',\n      'Wavg',\n      'Wtavg',\n      'Standard_deviation',\n    ];\n    return _.map(aggregateTypes, item =>\n      item\n        ? {\n          label: item,\n          value: item.toUpperCase(),\n        }\n        : {\n          label: 'None',\n          value: item,\n        },\n    );\n  }\n\n  private static unitOptions() {\n    return [\n      {\n        label: 'MILLISECOND',\n        value: 'MILLISECOND',\n      },\n      {\n        label: 'SECOND',\n        value: 'SECOND',\n      },\n      {\n        label: 'MINUTE',\n        value: 'MINUTE',\n      },\n      {\n        label: 'HOUR',\n        value: 'HOUR',\n      },\n      {\n        label: 'DAY',\n        value: 'DAY',\n      },\n      {\n        label: 'WEEK',\n        value: 'WEEK',\n      },\n      {\n        label: 'MONTH',\n        value: 'MONTH',\n      },\n      {\n        label: 'QUARTER',\n        value: 'QUARTER',\n      },\n      {\n        label: 'YEAR',\n        value: 'YEAR',\n      },\n    ];\n  }\n\n  entityBlur() {\n    this.refresh();\n    if (this.target.entity) {\n      this.datasource.getMetrics(this.target.entity).then((result: Array<Metric>) => {\n        this.suggest.metrics = [];\n        result.forEach(item => {\n          this.suggest.metrics.push(item.name);\n        });\n      });\n    }\n  }\n\n  metricBlur() {\n    this.refresh();\n    this.suggestTags();\n  }\n\n  tagRemove(index) {\n    this.target.tags.splice(index, 1);\n    this.segments.tagEditor.editIndex = undefined;\n    this.refresh();\n  }\n\n  tagEdit(index) {\n    this.segments.tagEditor.editIndex = index;\n    this.segments.tagEditor.key = this.target.tags[index].key;\n    this.segments.tagEditor.value = this.target.tags[index].value;\n    this.state.tagRow.tags[index].isEdit = true;\n    this.state.tagRow.isEdit = true;\n    this.state.tagRow.isEdit = true;\n  }\n\n  tagMouseover(index) {\n    if (!this.state.tagRow.isEdit) {\n      this.state.tagRow.tags[index].selected = true;\n    }\n  }\n\n  tagMouseleave(index) {\n    if (!this.state.tagRow.isEdit) {\n      this.state.tagRow.tags[index].selected = false;\n    }\n  }\n\n  saveTag() {\n    var editorValue = {\n      key: this.segments.tagEditor.key,\n      value: this.segments.tagEditor.value,\n    };\n    var index = this.segments.tagEditor.editIndex;\n    if (typeof index !== 'undefined') {\n      this.target.tags[index] = editorValue;\n    } else {\n      this.target.tags.push(editorValue);\n      this.state.tagRow.tags.push({selected: false});\n    }\n    if (typeof this.segments.tagEditor.editIndex !== 'undefined') {\n      this.state.tagRow.tags[this.segments.tagEditor.editIndex].selected = false;\n    }\n    this.state.tagRow.isEdit = false;\n    this.state.tagRow.canAdd = true;\n    this.segments.tagEditor.key = '';\n    this.segments.tagEditor.value = '';\n    this.refresh();\n  }\n\n  removeAllTags() {\n    this.closeTagEditor();\n    this.target.tags.length = 0;\n    this.refresh();\n  }\n\n  showTagEditor(index) {\n    if (typeof index !== 'undefined') {\n      this.segments.tagEditor.key = this.target.tags[index].key;\n      this.segments.tagEditor.value = this.target.tags[index].value;\n      this.state.tagRow.tags[index].isEdit = true;\n    }\n    this.segments.tagEditor.editIndex = index;\n    this.state.tagRow.isEdit = true;\n    this.state.tagRow.canAdd = false;\n    this.state.tagRow.isEdit = true;\n    this.suggestTags();\n  }\n\n  closeTagEditor() {\n    if (typeof this.segments.tagEditor.editIndex !== 'undefined') {\n      this.state.tagRow.tags[this.segments.tagEditor.editIndex].selected = false;\n    }\n    this.state.tagRow.isEdit = false;\n    this.state.tagRow.canAdd = true;\n    this.segments.tagEditor.key = '';\n    this.segments.tagEditor.value = '';\n  }\n\n  suggestTags() {\n    if (this.target.metric) {\n      const params = {\n        entity: undefined,\n      };\n      if (this.target.entity) {\n        params.entity = this.target.entity;\n      }\n      this.datasource.getMetricSeries(this.target.metric).then(series => {\n        this.suggest.tags.keys.length = 0;\n        this.suggest.tags.values.length = 0;\n        series.forEach(item => {\n          for (const key in item.tags) {\n            if (this.suggest.tags.keys.indexOf(key) === -1) {\n              this.suggest.tags.keys.push(key);\n            }\n            const value = item.tags[key];\n            if (this.suggest.tags.values.indexOf(value) === -1) {\n              if (this.segments.tagEditor.key) {\n                if (\n                  key === this.segments.tagEditor.key &&\n                  item.metric === this.target.metric &&\n                  item.entity === this.target.entity\n                ) {\n                  this.suggest.tags.values.push(value);\n                }\n              } else {\n                this.suggest.tags.values.push(value);\n              }\n            }\n          }\n        });\n      });\n    }\n  }\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","export class ChangeMyNameConfigCtrl {\n  static templateUrl = 'partials/config.html';\n  current: any;\n\n  constructor($scope) {}\n}\n"],"sourceRoot":""}