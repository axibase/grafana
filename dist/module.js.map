{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///./module.ts","webpack:///./datasource.ts","webpack:///./convertutils.ts","webpack:///./atsd_client.ts","webpack:///./query_ctrl.ts","webpack:///external \"app/plugins/sdk\"","webpack:///./config_ctrl.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","default","object","property","prototype","hasOwnProperty","p","s","e","__WEBPACK_EXTERNAL_MODULE__0__","_query_ctrl","_config_ctrl","ChangeMyNameAnnotationsQueryCtrl","templateUrl","Datasource","_datasource2","QueryCtrl","AtsdQueryCtrl","ConfigCtrl","ChangeMyNameConfigCtrl","AnnotationsQueryCtrl","_convertutils","_atsd_client","DatasourceType","ATSD","AS","AtsdDatasource","instanceSettings","backendSrv","templateSrv","$q","this","client","AtsdClient","proxyUrl","url","basicAuth","$inject","_version","Promise","u","next","a","throw","done","then","apply","label","sent","trys","ops","return","iterator","TypeError","pop","length","push","_a","configurable","query","options","_this","start","_convertToAtsdTime","range","from","end","to","qs","_lodash2","each","targets","target","disconnect","_convertTargetToQuery","queries","compact","isEmpty","defer","resolve","data","promise","groupByTags","tags","val","_performTimeSeriesQuery","response","result","filter","keys","map","k","every","v","_transformMetricData","sort","b","nameA","toLowerCase","nameB","tsQueries","entity","metric","implicit","tagCombos","group","en","tags_1","startDate","endDate","limit","table","timeFormat","aggregate","aggregation","querySeries","catch","resp","console","log","getEntities","entities","getMetrics","metrics","getMetricSeries","metricSeries","getVersion","version","getTables","entityName","tables","testDatasource","status","message","title","hide","replace","type","convertTags","_convertToSeconds","_parsePeriod","date","Date","_datemath","parse","toISOString","period","count","unit","metricData","dps","item","datapoints","interval","grafanaTags","forEach","transport","baseSettings","tableName","method","params","baseRequest","arr","Array","Error","metricName","q","datasourceRequest","mixinBaseOptions","cOptions","request","__assign","headers","fullUrl","part","substr","BASE_URL","constructor","setPrototypeOf","__proto__","assign","arguments","_super","$scope","$injector","suggest","types","aggregateOptions","units","unitOptions","values","segments","tagEditor","editIndex","state","isLoaded","showAggregation","tagRow","isEdit","canAdd","model","_typeof","selected","datasource","err","buildInfo","hbaseVersion","commaPos","indexOf","entityBlur","__extends","refresh","_i","aggregateTypes","toUpperCase","fetchSuggestMetric","tableBlur","suggestTags","metricBlur","tagRemove","index","splice","tagEdit","tagMouseover","tagMouseleave","saveTag","editorValue","removeAllTags","closeTagEditor","showTagEditor","series"],"mappings":"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","file":"module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import AtsdDatasource from './datasource';\nimport {AtsdQueryCtrl} from './query_ctrl';\nimport {ChangeMyNameConfigCtrl} from './config_ctrl';\n\nclass ChangeMyNameAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  AtsdDatasource as Datasource,\n  AtsdQueryCtrl as QueryCtrl,\n  ChangeMyNameConfigCtrl as ConfigCtrl,\n  ChangeMyNameAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\nimport {_convertToAtsdTime, _convertToSeconds, _parsePeriod, _transformMetricData, convertTags} from './convertutils';\nimport {BackendSrv} from 'grafana/app/core/services/backend_srv';\nimport {AtsdClient, AtsdVersion, Entity, Table} from './atsd_client';\n\n\nexport enum DatasourceType {\n  ATSD, AS\n}\n\n\nexport default class AtsdDatasource {\n  get version(): AtsdVersion {\n    if (this._version) {\n      return this._version;\n    }\n    (async () => {\n      this._version = await this.client.version();\n    })();\n    return this._version;\n  }\n\n  private readonly client: AtsdClient;\n  private _version: AtsdVersion;\n\n  /** @ngInject */\n  constructor(instanceSettings, private backendSrv: BackendSrv, private templateSrv, private $q) {\n    this.client = new AtsdClient(this.backendSrv, {\n      proxyUrl: instanceSettings.url,\n      basicAuth: instanceSettings.basicAuth,\n    });\n  }\n\n\n  query(options) {\n    const start = _convertToAtsdTime(options.range.from);\n    const end = _convertToAtsdTime(options.range.to);\n    const qs: any[] = [];\n\n    _.each(options.targets, target => {\n      target.disconnect = options.targets[0].disconnect;\n      qs.push(this._convertTargetToQuery(target));\n    });\n\n    const queries = _.compact(qs);\n\n    if (_.isEmpty(queries)) {\n      const d = this.$q.defer();\n      d.resolve({data: []});\n      return d.promise;\n    }\n\n    const groupByTags = {};\n\n    _.each(queries, query => {\n      _.each(query.tags, (val, key) => {\n        groupByTags[key] = true;\n      });\n    });\n\n    return this._performTimeSeriesQuery(queries, start, end).then(response => {\n      if (response.data === undefined) {\n        return {data: []};\n      }\n      const result = response.data\n        .filter(s => s && s.tags && !Object.keys(s.tags).map(k => s.tags[k]).every(v => v === '*'))\n        .map(_transformMetricData);\n      result.sort((a, b) => {\n        const nameA = a.target.toLowerCase();\n        const nameB = b.target.toLowerCase();\n\n        if (nameA < nameB) {\n          return -1;\n        } else if (nameA > nameB) {\n          return 1;\n        } else {\n          return 0;\n        }\n      });\n      return {data: result};\n    });\n  }\n\n  private _performTimeSeriesQuery(queries, start, end) {\n    const tsQueries: any[] = [];\n    _.each(queries, query => {\n      if (query.entity !== '' && query.metric !== '') {\n        if (query.implicit) {\n          if (query.tagCombos !== undefined) {\n            _.each(query.tagCombos, group => {\n              if (group.en) {\n                const tags = {};\n\n                _.each(group.data, (value, key) => {\n                  tags[key] = [value];\n                });\n\n                tsQueries.push({\n                  startDate: start,\n                  endDate: end,\n                  limit: 10000,\n                  entity: query.entity,\n                  metric: query.table ? `${query.table},${query.metric}` : query.metric,\n                  tags: tags,\n                  timeFormat: 'milliseconds',\n                  aggregate: query.aggregation,\n                });\n              }\n            });\n          }\n        } else {\n          const tags = {};\n\n          for (const k in query.tags) {\n            tags[k] = query.tags[k];\n          }\n\n          tsQueries.push({\n            startDate: start,\n            endDate: end,\n            limit: 10000,\n            entity: query.entity,\n            metric: query.table ? `${query.table},${query.metric}` : query.metric,\n            tags: tags,\n            timeFormat: 'milliseconds',\n            aggregate: query.aggregation,\n          });\n        }\n      }\n    });\n\n    if (tsQueries.length === 0) {\n      const d = this.$q.defer();\n      d.resolve({data: undefined});\n      return d.promise;\n    }\n\n    return this.client.querySeries(tsQueries)\n      .catch(resp => console.log(resp.data));\n  }\n\n  getEntities(): Promise<Array<Entity>> {\n    return this.client.entities();\n  }\n\n  getMetrics(entity: string, table?: string) {\n    return this.client.metrics(entity, table);\n  }\n\n  getMetricSeries(metric) {\n    return this.client.metricSeries(metric);\n  }\n\n  getVersion() {\n    return this.client.version();\n  }\n\n  getTables(entityName): Promise<Table[]> {\n    return this.client.tables(entityName);\n  }\n\n  testDatasource() {\n    return this.client.version().then(() => ({\n      status: 'success',\n      message: 'Data source is working',\n      title: 'Success',\n    }));\n  }\n\n  private _convertTargetToQuery(target) {\n    if (!target.metric || !target.entity || target.hide) {\n      return null;\n    }\n    return {\n      entity: this.templateSrv.replace(target.entity),\n      metric: this.templateSrv.replace(target.metric),\n      aggregation: target.aggregation.type !== undefined ? target.aggregation : undefined,\n      tags: convertTags(target.tags),\n      disconnect:\n        target.disconnect !== undefined && target.disconnect !== ''\n          ? _convertToSeconds(_parsePeriod(target.disconnect))\n          : 24 * 60 * 60,\n    };\n  }\n}\n","import {parse} from 'grafana/app/core/utils/datemath';\nimport _ from 'lodash';\n\nexport function _convertToAtsdTime(date: any) {\n  date = date !== 'now' ? date : new Date();\n  date = parse(date);\n\n  return date.toISOString();\n}\n\nexport function _parsePeriod(period) {\n  return {count: period.count, unit: period.unit};\n}\n\nexport function _transformMetricData(metricData) {\n  const dps = _.map(metricData.data, function(item) {\n    return [item.v, item.t];\n  });\n  let name = metricData.entity + ': ' + metricData.metric;\n  _.each(metricData.tags, (value, key) => {\n    name += `, ${key}=${value}`;\n  });\n  return {target: name, datapoints: dps};\n}\n\nexport function _convertToSeconds(interval) {\n  let count = interval.count;\n\n  switch (interval.unit) {\n    case 'YEAR':\n      count *= 365 * 24 * 60 * 60;\n      break;\n    case 'MONTH':\n      count *= 30 * 24 * 60 * 60;\n      break;\n    case 'WEEK':\n      count *= 7 * 24 * 60 * 60;\n      break;\n    case 'DAY':\n      count *= 24 * 60 * 60;\n      break;\n    case 'HOUR':\n      count *= 60 * 60;\n      break;\n    case 'MINUTE':\n      count *= 60;\n      break;\n    case 'SECOND':\n      break;\n    default:\n      count = 0;\n  }\n\n  return count;\n}\n\nexport interface GrafanaTag {\n  key: string;\n  value: string;\n}\n\nexport function convertTags(grafanaTags: Array<GrafanaTag>) {\n  const tags = {};\n  grafanaTags.forEach(item => {\n    if (tags[item.key]) {\n      tags[item.key].push(item.value);\n    } else {\n      tags[item.key] = [item.value];\n    }\n  });\n  return tags;\n}\n","export interface HttpTransport {\n  get(url: any, params?: any): any;\n\n  delete(url: any): any;\n\n  post(url: any, data: any): any;\n\n  patch(url: any, data: any): any;\n\n  put(url: any, data: any): any;\n\n  request(options: any): any;\n\n  datasourceRequest(options: any): any;\n}\n\ninterface Metric {\n  name: string;\n}\n\nexport interface Entity {\n  name: string;\n}\n\nexport interface Table {\n  name: string;\n}\n\ninterface BaseSettings {\n  basicAuth: string;\n  proxyUrl: string;\n}\n\nexport interface AtsdVersion {\n  buildInfo: {\n    revisionNumber: string;\n    hbaseVersion?: string;\n  };\n}\n\nexport interface SeriesFilter {\n  entity: string;\n  metric: string;\n  startDate: string;\n  endDate: string;\n  limit: number;\n  tags?: {[key: string]: string[]};\n  timeFormat: string;\n  aggregate: any;\n}\n\nexport interface Series {\n}\n\nexport class AtsdClient {\n  private static readonly BASE_URL = 'api/v1/';\n\n  constructor(private transport: HttpTransport, private baseSettings: BaseSettings) {\n  }\n\n  metrics(entityName: string, tableName?: string): Promise<Array<Metric>> {\n    const options = {\n      method: 'GET',\n      url: `entities/${entityName}/metrics`,\n      params: tableName ? {table: tableName} : undefined,\n    };\n    return this.baseRequest(options)\n      .then(arr => (arr instanceof Array) ? arr : []);\n  }\n\n  entities(): Promise<Array<Entity>> {\n    return this.baseRequest({\n      method: 'GET',\n      url: `entities`,\n    }).then(arr => (arr instanceof Array) ? arr : []);\n  }\n\n  version(): Promise<AtsdVersion> {\n    return this.baseRequest({\n      method: 'GET',\n      url: 'version',\n    }).catch(() => {\n      throw new Error('Failed to execute test query!');\n    });\n  }\n\n  metricSeries(metricName): Promise<any> {\n    return this.baseRequest({\n      method: 'GET',\n      url: `metrics/${metricName}/series`,\n    }).then(arr => (arr instanceof Array) ? arr : []);\n  }\n\n  querySeries(q: any[]): Promise<any[]> {\n    return this.transport.datasourceRequest(this.mixinBaseOptions({\n      url: 'series/query',\n      method: 'POST',\n      data: q,\n    }));\n  }\n\n  tables(entityName: string): Promise<Table[]> {\n    return this.baseRequest({\n      method: 'GET',\n      url: `entities/${entityName}/tables`,\n    }).then(arr => (arr instanceof Array) ? arr : []);\n  }\n\n  private baseRequest(options): Promise<any> {\n    const cOptions = this.mixinBaseOptions(options);\n    return this.transport.request(cOptions).then(resp => {\n      return resp;\n    });\n  }\n\n  private mixinBaseOptions(options) {\n    return {\n      ...options,\n      headers: {\n        basicAuth: this.baseSettings.basicAuth,\n      },\n      url: this.fullUrl(options.url),\n    };\n  }\n\n  private fullUrl(part) {\n    const url = this.baseSettings.proxyUrl;\n    const fullUrl = url[url.length - 1] !== '/' ? `${url}/` : url;\n    if (!(part.length <= 0 || part[0] !== '/')) {\n      part = part.substr(1, part.length - 1);\n    }\n    return fullUrl + AtsdClient.BASE_URL + part;\n  }\n}\n","import _ from 'lodash';\nimport {QueryCtrl} from 'grafana/app/plugins/sdk';\n\ninterface Suggestion {\n  metrics: string[];\n  entities: string[];\n  tables: string[];\n  aggregation: {\n    types: any;\n    period: {units: any};\n  };\n  tags: {\n    keys: Array<any>;\n    values: any[];\n  };\n}\n\ninterface State {\n  isLoaded: boolean;\n  showAggregation?: boolean;\n  tagRow: {\n    isEdit: boolean;\n    canAdd: boolean;\n    tags: any[];\n  };\n}\n\ninterface Segment {\n  tagEditor: {\n    editIndex: number | undefined;\n    key: string | undefined;\n    value: string | undefined;\n  };\n}\n\ninterface Metric {\n  name: string;\n}\n\nexport class AtsdQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n  private suggest: Suggestion;\n  private segments: Segment;\n  private state: State;\n  private model: any;\n\n  /** @ngInject */\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    this.suggest = {\n      metrics: [],\n      entities: [],\n      tables: [],\n      aggregation: {\n        types: AtsdQueryCtrl.aggregateOptions(),\n        period: {\n          units: AtsdQueryCtrl.unitOptions(),\n        },\n      },\n      tags: {\n        keys: [],\n        values: [],\n      },\n    };\n\n    this.segments = {\n      tagEditor: {\n        editIndex: undefined,\n        key: undefined,\n        value: undefined,\n      },\n    };\n\n    this.state = {\n      isLoaded: true,\n      showAggregation: undefined,\n      tagRow: {\n        isEdit: false,\n        canAdd: true,\n        tags: [],\n      },\n    };\n\n    this.model = {...this.target};\n    this.model.table = undefined;\n    this.model.metric = undefined;\n\n    if (typeof this.model.tags !== 'object') {\n      this.model.tags = [];\n    } else {\n      for (let i = 0; i < this.model.tags.length; i++) {\n        this.state.tagRow.tags.push({selected: false});\n      }\n    }\n    this.model.entity = this.model.entity ? this.model.entity : undefined;\n    this.model.metric = this.model.metric ? this.model.metric : undefined;\n    this.model.aggregation = this.model.aggregation ? this.model.aggregation : {\n      type: this.suggest.aggregation.types[0].value,\n      period: {\n        count: 1,\n        unit: this.suggest.aggregation.period.units[3].value,\n      },\n    };\n\n    this.suggest.entities = [];\n    this.datasource\n      .getEntities()\n      .then(result => {\n        result.forEach(item => this.suggest.entities.push(item.name));\n        this.state.isLoaded = false;\n      })\n      .catch(err => console.log(err));\n    this.datasource.getVersion()\n      .then(v => {\n        this.state.showAggregation = !!v.buildInfo.hbaseVersion;\n        if (!this.state.showAggregation) {\n          this.model.aggregation = {\n            type: this.suggest.aggregation.types[0].value,\n            period: {\n              count: 1,\n              unit: this.suggest.aggregation.period.units[3].value,\n            },\n          };\n        }\n        if (this.model.entity) {\n          if (this.state.showAggregation) {\n            this.model.metric = this.target.metric;\n          } else {\n            const commaPos = this.target.metric.indexOf(',');\n            if (commaPos > -1) {\n              this.model.table = this.target.metric.substr(0, commaPos);\n              this.model.metric = this.target.metric.substr(commaPos + 1);\n            } else {\n              this.model.metric = this.target.metric;\n            }\n          }\n          this.entityBlur();\n        }\n      });\n  }\n\n  refresh() {\n    for (const k of  Object.keys(this.model)) {\n      this.target[k] = this.model[k];\n    }\n    this.target.metric = (this.model.metric && this.model.table) ? `${this.model.table},${this.model.metric}` : this.model.metric;\n    super.refresh();\n  }\n\n  private static aggregateOptions() {\n    const aggregateTypes = [\n      undefined,\n      'Count',\n      'Min',\n      'Max',\n      'Avg',\n      'Median',\n      'Sum',\n      'Percentile_999',\n      'Percentile_995',\n      'Percentile_99',\n      'Percentile_95',\n      'Percentile_90',\n      'Percentile_75',\n      'First',\n      'Last',\n      'Delta',\n      'Wavg',\n      'Wtavg',\n      'Standard_deviation',\n    ];\n    return _.map(aggregateTypes, item =>\n      item\n        ? {\n          label: item,\n          value: item.toUpperCase(),\n        }\n        : {\n          label: 'None',\n          value: item,\n        },\n    );\n  }\n\n  private static unitOptions() {\n    return [\n      {\n        label: 'MILLISECOND',\n        value: 'MILLISECOND',\n      },\n      {\n        label: 'SECOND',\n        value: 'SECOND',\n      },\n      {\n        label: 'MINUTE',\n        value: 'MINUTE',\n      },\n      {\n        label: 'HOUR',\n        value: 'HOUR',\n      },\n      {\n        label: 'DAY',\n        value: 'DAY',\n      },\n      {\n        label: 'WEEK',\n        value: 'WEEK',\n      },\n      {\n        label: 'MONTH',\n        value: 'MONTH',\n      },\n      {\n        label: 'QUARTER',\n        value: 'QUARTER',\n      },\n      {\n        label: 'YEAR',\n        value: 'YEAR',\n      },\n    ];\n  }\n\n  entityBlur() {\n    this.refresh();\n    if (this.model.entity) {\n      if (this.state.showAggregation !== undefined) {\n        if (this.state.showAggregation) {\n\n        } else {\n          this.datasource.getTables(this.model.entity).then(tables => {\n            this.suggest.tables = tables.map(t => t.name);\n            this.suggest.metrics = [];\n\n          });\n        }\n        this.fetchSuggestMetric();\n      }\n    }\n  }\n\n  private fetchSuggestMetric() {\n    this.datasource.getMetrics(this.model.entity, this.model.table).then((result: Array<Metric>) => {\n      this.suggest.metrics = result.map(m => m.name);\n      if (this.state.showAggregation === false && this.model.table) {\n        this.suggest.metrics = this.suggest.metrics\n          .map(name => name.substr(this.model.table.length + 1));\n      }\n    });\n  }\n\n  tableBlur() {\n    this.fetchSuggestMetric();\n    this.refresh();\n    this.suggestTags();\n  }\n\n  metricBlur() {\n    this.refresh();\n    this.suggestTags();\n  }\n\n  tagRemove(index) {\n    this.model.tags.splice(index, 1);\n    this.segments.tagEditor.editIndex = undefined;\n    this.refresh();\n  }\n\n  tagEdit(index) {\n    this.segments.tagEditor.editIndex = index;\n    this.segments.tagEditor.key = this.model.tags[index].key;\n    this.segments.tagEditor.value = this.model.tags[index].value;\n    this.state.tagRow.tags[index].isEdit = true;\n    this.state.tagRow.isEdit = true;\n    this.state.tagRow.isEdit = true;\n  }\n\n  tagMouseover(index) {\n    if (!this.state.tagRow.isEdit) {\n      this.state.tagRow.tags[index].selected = true;\n    }\n  }\n\n  tagMouseleave(index) {\n    if (!this.state.tagRow.isEdit) {\n      this.state.tagRow.tags[index].selected = false;\n    }\n  }\n\n  saveTag() {\n    const editorValue = {\n      key: this.segments.tagEditor.key,\n      value: this.segments.tagEditor.value,\n    };\n    const index = this.segments.tagEditor.editIndex;\n    if (typeof index !== 'undefined') {\n      this.model.tags[index] = editorValue;\n    } else {\n      this.model.tags.push(editorValue);\n      this.state.tagRow.tags.push({selected: false});\n    }\n    if (typeof this.segments.tagEditor.editIndex !== 'undefined') {\n      this.state.tagRow.tags[this.segments.tagEditor.editIndex].selected = false;\n    }\n    this.state.tagRow.isEdit = false;\n    this.state.tagRow.canAdd = true;\n    this.segments.tagEditor.key = '';\n    this.segments.tagEditor.value = '';\n    this.refresh();\n  }\n\n  removeAllTags() {\n    this.closeTagEditor();\n    this.model.tags.length = 0;\n    this.refresh();\n  }\n\n  showTagEditor(index) {\n    if (typeof index !== 'undefined') {\n      this.segments.tagEditor.key = this.model.tags[index].key;\n      this.segments.tagEditor.value = this.model.tags[index].value;\n      this.state.tagRow.tags[index].isEdit = true;\n    }\n    this.segments.tagEditor.editIndex = index;\n    this.state.tagRow.isEdit = true;\n    this.state.tagRow.canAdd = false;\n    this.state.tagRow.isEdit = true;\n    this.suggestTags();\n  }\n\n  closeTagEditor() {\n    if (typeof this.segments.tagEditor.editIndex !== 'undefined') {\n      this.state.tagRow.tags[this.segments.tagEditor.editIndex].selected = false;\n    }\n    this.state.tagRow.isEdit = false;\n    this.state.tagRow.canAdd = true;\n    this.segments.tagEditor.key = '';\n    this.segments.tagEditor.value = '';\n  }\n\n  suggestTags() {\n    if (this.model.metric) {\n      const params = {\n        entity: undefined,\n      };\n      if (this.model.entity) {\n        params.entity = this.model.entity;\n      }\n      this.datasource.getMetricSeries(this.model.metric).then(series => {\n        this.suggest.tags.keys.length = 0;\n        this.suggest.tags.values.length = 0;\n        series.forEach(item => {\n          for (const key in item.tags) {\n            if (this.suggest.tags.keys.indexOf(key) === -1) {\n              this.suggest.tags.keys.push(key);\n            }\n            const value = item.tags[key];\n            if (this.suggest.tags.values.indexOf(value) === -1) {\n              if (this.segments.tagEditor.key) {\n                if (\n                  key === this.segments.tagEditor.key &&\n                  item.metric === this.model.metric &&\n                  item.entity === this.model.entity\n                ) {\n                  this.suggest.tags.values.push(value);\n                }\n              } else {\n                this.suggest.tags.values.push(value);\n              }\n            }\n          }\n        });\n      });\n    }\n  }\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","export class ChangeMyNameConfigCtrl {\n  static templateUrl = 'partials/config.html';\n  current: any;\n\n  constructor($scope) {}\n}\n"],"sourceRoot":""}