{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///./module.ts","webpack:///./datasource.ts","webpack:///./convertutils.ts","webpack:///./query_ctrl.ts","webpack:///external \"app/plugins/sdk\"","webpack:///./config_ctrl.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","default","object","property","prototype","hasOwnProperty","p","s","e","__WEBPACK_EXTERNAL_MODULE__0__","_query_ctrl","_config_ctrl","ChangeMyNameAnnotationsQueryCtrl","templateUrl","Datasource","_datasource2","QueryCtrl","AtsdQueryCtrl","ConfigCtrl","ChangeMyNameConfigCtrl","AnnotationsQueryCtrl","_convertutils","AtsdDatasource","instanceSettings","backendSrv","templateSrv","$q","this","url","basicAuth","$inject","query","options","_this","start","_convertToAtsdTime","range","from","end","to","qs","_lodash2","each","targets","target","disconnect","push","_convertTargetToQuery","queries","compact","isEmpty","defer","resolve","data","promise","groupByTags","tags","val","_performTimeSeriesQuery","then","response","result","map","_transformMetricData","sort","a","b","nameA","toLowerCase","nameB","tsQueries","entity","metric","implicit","tagCombos","group","en","tags_1","startDate","endDate","limit","timeFormat","aggregate","aggregation","k","length","method","fullUrl","headers","Authorization","datasourceRequest","getEntities","params","httpRequest","getMetrics","getMetricSeries","testDatasource","status","message","title","cache","part","substr","hide","replace","type","convertTags","_convertToSeconds","_parsePeriod","date","Date","_datemath","parse","toISOString","period","count","unit","metricData","dps","item","v","datapoints","interval","grafanaTags","forEach","_super","$scope","$injector","suggest","metrics","entities","types","aggregateOptions","units","unitOptions","keys","values","segments","tagEditor","editIndex","state","isLoaded","tagRow","isEdit","canAdd","entityBlur","_typeof","selected","datasource","catch","console","log","__extends","aggregateTypes","label","toUpperCase","refresh","Array","metricBlur","suggestTags","tagRemove","index","splice","tagEdit","tagMouseover","tagMouseleave","saveTag","editorValue","removeAllTags","closeTagEditor","showTagEditor","series","indexOf"],"mappings":"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","file":"module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import AtsdDatasource from './datasource';\nimport {AtsdQueryCtrl} from './query_ctrl';\nimport {ChangeMyNameConfigCtrl} from './config_ctrl';\n\nclass ChangeMyNameAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  AtsdDatasource as Datasource,\n  AtsdQueryCtrl as QueryCtrl,\n  ChangeMyNameConfigCtrl as ConfigCtrl,\n  ChangeMyNameAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\nimport {_convertToAtsdTime, _convertToSeconds, _parsePeriod, _transformMetricData, convertTags} from './convertutils';\n\nexport default class AtsdDatasource {\n  private readonly url: string;\n  private readonly basicAuth: string;\n\n  /** @ngInject */\n  constructor(instanceSettings, private backendSrv, private templateSrv, private $q) {\n    this.url = instanceSettings.url;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.templateSrv = templateSrv;\n    this.backendSrv = backendSrv;\n  }\n\n  query(options) {\n    const start = _convertToAtsdTime(options.range.from);\n    const end = _convertToAtsdTime(options.range.to);\n    const qs: any[] = [];\n\n    _.each(options.targets, target => {\n      target.disconnect = options.targets[0].disconnect;\n      qs.push(this._convertTargetToQuery(target));\n    });\n\n    const queries = _.compact(qs);\n\n    if (_.isEmpty(queries)) {\n      const d = this.$q.defer();\n      d.resolve({data: []});\n      return d.promise;\n    }\n\n    const groupByTags = {};\n\n    _.each(queries, query => {\n      _.each(query.tags, (val, key) => {\n        groupByTags[key] = true;\n      });\n    });\n\n    return this._performTimeSeriesQuery(queries, start, end).then(response => {\n      if (response.data === undefined) {\n        return {data: []};\n      }\n      const result = response.data.map(_transformMetricData);\n      result.sort((a, b) => {\n        const nameA = a.target.toLowerCase();\n        const nameB = b.target.toLowerCase();\n\n        if (nameA < nameB) {\n          return -1;\n        } else if (nameA > nameB) {\n          return 1;\n        } else {\n          return 0;\n        }\n      });\n\n      return {data: result};\n    });\n  }\n\n  private _performTimeSeriesQuery(queries, start, end) {\n    const tsQueries: any[] = [];\n\n    _.each(queries, query => {\n      if (query.entity !== '' && query.metric !== '') {\n        if (query.implicit) {\n          if (query.tagCombos !== undefined) {\n            _.each(query.tagCombos, group => {\n              if (group.en) {\n                const tags = {};\n\n                _.each(group.data, (value, key) => {\n                  tags[key] = [value];\n                });\n\n                tsQueries.push({\n                  startDate: start,\n                  endDate: end,\n                  limit: 10000,\n                  entity: query.entity,\n                  metric: query.metric,\n                  tags: tags,\n                  timeFormat: 'milliseconds',\n                  aggregate: query.aggregation,\n                });\n              }\n            });\n          }\n        } else {\n          const tags = {};\n\n          for (const k in query.tags) {\n            tags[k] = query.tags[k];\n          }\n\n          tsQueries.push({\n            startDate: start,\n            endDate: end,\n            limit: 10000,\n            entity: query.entity,\n            metric: query.metric,\n            tags: tags,\n            timeFormat: 'milliseconds',\n            aggregate: query.aggregation,\n          });\n        }\n      }\n    });\n\n    if (tsQueries.length === 0) {\n      const d = this.$q.defer();\n      d.resolve({data: undefined});\n      return d.promise;\n    }\n\n    const options = {\n      method: 'POST',\n      url: this.fullUrl('/api/v1/series/query'),\n      data: tsQueries,\n      headers: {\n        Authorization: this.basicAuth,\n      },\n    };\n\n    return this.backendSrv.datasourceRequest(options).then(result => result);\n  }\n\n  getEntities(params) {\n    const options = {\n      method: 'GET',\n      url: this.fullUrl('/api/v1/entities'),\n      params: params,\n      headers: {\n        Authorization: this.basicAuth,\n      },\n    };\n    return this.httpRequest(options).then((result) => {\n      return result.data;\n    });\n  }\n\n  getMetrics(entity, params) {\n    const options = {\n      method: 'GET',\n      url: this.fullUrl('/api/v1/entities/' + entity + '/metrics'),\n      params: params,\n      headers: {\n        Authorization: this.basicAuth,\n      },\n    };\n    return this.httpRequest(options).then((result) => {\n      return result.data;\n    });\n  }\n\n  getMetricSeries(metric, params) {\n    const options = {\n      method: 'GET',\n      url: this.fullUrl('/api/v1/metrics/' + metric + '/series'),\n      params: params,\n      headers: {\n        Authorization: this.basicAuth,\n      },\n    };\n    return this.httpRequest(options).then(result => result.data);\n  }\n\n  testDatasource() {\n    const options = {\n      method: 'POST',\n      url: this.fullUrl('/api/v1/series/query'),\n      data: [],\n      headers: {\n        Authorization: this.basicAuth,\n      },\n    };\n    return this.httpRequest(options).then(() => ({\n      status: 'success',\n      message: 'Data source is working',\n      title: 'Success',\n    }));\n  }\n\n  httpRequest(options) {\n    if (!options.cache) {\n      options.cache = true;\n    }\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  fullUrl(part) {\n    const fullUrl = this.url[this.url.length - 1] !== '/' ? this.url + '/' : this.url;\n    if (!(part.length <= 0 || part[0] !== '/')) {\n      part = part.substr(1, part.length - 1);\n    }\n    return fullUrl + part;\n  }\n\n  private _convertTargetToQuery(target) {\n    if (!target.metric || !target.entity || target.hide) {\n      return null;\n    }\n    return {\n      entity: this.templateSrv.replace(target.entity),\n      metric: this.templateSrv.replace(target.metric),\n      aggregation: target.aggregation.type !== undefined ? target.aggregation : undefined,\n      tags: convertTags(target.tags),\n      disconnect:\n        target.disconnect !== undefined && target.disconnect !== ''\n          ? _convertToSeconds(_parsePeriod(target.disconnect))\n          : 24 * 60 * 60,\n    };\n  }\n}\n","import {parse} from 'grafana/app/core/utils/datemath';\nimport _ from 'lodash';\n\nexport function _convertToAtsdTime(date: any) {\n  date = date !== 'now' ? date : new Date();\n  date = parse(date);\n\n  return date.toISOString();\n}\n\nexport function _parsePeriod(period) {\n  return {count: period.count, unit: period.unit};\n}\n\nexport function _transformMetricData(metricData) {\n  const dps = _.map(metricData.data, function(item) {\n    return [item.v, item.t];\n  });\n  let name = metricData.entity + ': ' + metricData.metric;\n  _.each(metricData.tags, (value, key) => {\n    name += `, ${key}=${value}`;\n  });\n  return {target: name, datapoints: dps};\n}\n\nexport function _convertToSeconds(interval) {\n  let count = interval.count;\n\n  switch (interval.unit) {\n    case 'YEAR':\n      count *= 365 * 24 * 60 * 60;\n      break;\n    case 'MONTH':\n      count *= 30 * 24 * 60 * 60;\n      break;\n    case 'WEEK':\n      count *= 7 * 24 * 60 * 60;\n      break;\n    case 'DAY':\n      count *= 24 * 60 * 60;\n      break;\n    case 'HOUR':\n      count *= 60 * 60;\n      break;\n    case 'MINUTE':\n      count *= 60;\n      break;\n    case 'SECOND':\n      break;\n    default:\n      count = 0;\n  }\n\n  return count;\n}\n\nexport interface GrafanaTag {\n  key: string;\n  value: string;\n}\n\n\nexport function convertTags(grafanaTags: Array<GrafanaTag>) {\n  const tags = {};\n  grafanaTags.forEach(item => {\n    if (tags[item.key]) {\n      tags[item.key].push(item.value);\n    } else {\n      tags[item.key] = [item.value];\n    }\n  });\n  return tags;\n}\n","import _ from 'lodash';\nimport {QueryCtrl} from 'grafana/app/plugins/sdk';\n\ninterface Suggestion {\n  metrics: string[];\n  entities: string[];\n  aggregation: {\n    types: any;\n    period: {units: any};\n  };\n  tags: {\n    keys: Array<any>;\n    values: any[];\n  };\n}\n\ninterface State {\n  isLoaded: boolean;\n  tagRow: {\n    isEdit: boolean;\n    canAdd: boolean;\n    tags: any[];\n  };\n}\n\ninterface Segment {\n  tagEditor: {\n    editIndex: number | undefined;\n    key: string | undefined;\n    value: string | undefined;\n  };\n}\n\ninterface Metric {\n  name: string;\n}\n\nexport class AtsdQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n  private suggest: Suggestion;\n  private segments: Segment;\n  private state: State;\n\n  /** @ngInject */\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    this.suggest = {\n      metrics: [],\n      entities: [],\n      aggregation: {\n        types: AtsdQueryCtrl.aggregateOptions(),\n        period: {\n          units: AtsdQueryCtrl.unitOptions(),\n        },\n      },\n      tags: {\n        keys: [],\n        values: [],\n      },\n    };\n\n    this.segments = {\n      tagEditor: {\n        editIndex: undefined,\n        key: undefined,\n        value: undefined,\n      },\n    };\n\n    this.state = {\n      isLoaded: true,\n      tagRow: {\n        isEdit: false,\n        canAdd: true,\n        tags: [],\n      },\n    };\n\n    if (this.target.entity) {\n      this.entityBlur();\n    }\n\n    if (typeof this.target.tags !== 'object') {\n      this.target.tags = [];\n    } else {\n      for (let i = 0; i < this.target.tags.length; i++) {\n        this.state.tagRow.tags.push({selected: false});\n      }\n    }\n    this.target.entity = this.target.entity ? this.target.entity : undefined;\n    this.target.metric = this.target.metric ? this.target.metric : undefined;\n    this.target.aggregation = this.target.aggregation\n      ? this.target.aggregation\n      : {\n        type: this.suggest.aggregation.types[0].value,\n        period: {\n          count: 1,\n          unit: this.suggest.aggregation.period.units[3].value,\n        },\n      };\n\n    this.suggest.entities = [];\n    this.datasource\n      .getEntities({})\n      .then(result => {\n        result.forEach(item => this.suggest.entities.push(item.name));\n        this.state.isLoaded = false;\n      })\n      .catch(() => console.log('Failed to retrieve entities'));\n  }\n\n  private static aggregateOptions() {\n    const aggregateTypes = [\n      undefined,\n      'Count',\n      'Min',\n      'Max',\n      'Avg',\n      'Median',\n      'Sum',\n      'Percentile_999',\n      'Percentile_995',\n      'Percentile_99',\n      'Percentile_95',\n      'Percentile_90',\n      'Percentile_75',\n      'First',\n      'Last',\n      'Delta',\n      'Wavg',\n      'Wtavg',\n      'Standard_deviation',\n    ];\n    return _.map(\n      aggregateTypes,\n      item => item ? {\n        label: item,\n        value: item.toUpperCase(),\n      } : {\n        label: 'None',\n        value: item,\n      },\n    );\n  }\n\n  private static unitOptions() {\n    return [\n      {\n        label: 'MILLISECOND',\n        value: 'MILLISECOND',\n      },\n      {\n        label: 'SECOND',\n        value: 'SECOND',\n      },\n      {\n        label: 'MINUTE',\n        value: 'MINUTE',\n      },\n      {\n        label: 'HOUR',\n        value: 'HOUR',\n      },\n      {\n        label: 'DAY',\n        value: 'DAY',\n      },\n      {\n        label: 'WEEK',\n        value: 'WEEK',\n      },\n      {\n        label: 'MONTH',\n        value: 'MONTH',\n      },\n      {\n        label: 'QUARTER',\n        value: 'QUARTER',\n      },\n      {\n        label: 'YEAR',\n        value: 'YEAR',\n      },\n    ];\n  }\n\n  entityBlur() {\n    this.refresh();\n    if (this.target.entity) {\n      this.datasource.getMetrics(this.target.entity, {}).then((result: Array<Metric>) => {\n        this.suggest.metrics = [];\n        if (result instanceof Array) {\n          result.forEach(item => {\n            this.suggest.metrics.push(item.name);\n          });\n        }\n      });\n    }\n  }\n\n  metricBlur() {\n    this.refresh();\n    this.suggestTags();\n  }\n\n  tagRemove(index) {\n    this.target.tags.splice(index, 1);\n    this.segments.tagEditor.editIndex = undefined;\n    this.refresh();\n  }\n\n  tagEdit(index) {\n    this.segments.tagEditor.editIndex = index;\n    this.segments.tagEditor.key = this.target.tags[index].key;\n    this.segments.tagEditor.value = this.target.tags[index].value;\n    this.state.tagRow.tags[index].isEdit = true;\n    this.state.tagRow.isEdit = true;\n    this.state.tagRow.isEdit = true;\n  }\n\n  tagMouseover(index) {\n    if (!this.state.tagRow.isEdit) {\n      this.state.tagRow.tags[index].selected = true;\n    }\n  }\n\n  tagMouseleave(index) {\n    if (!this.state.tagRow.isEdit) {\n      this.state.tagRow.tags[index].selected = false;\n    }\n  }\n\n  saveTag() {\n    var editorValue = {\n      key: this.segments.tagEditor.key,\n      value: this.segments.tagEditor.value,\n    };\n    var index = this.segments.tagEditor.editIndex;\n    if (typeof index !== 'undefined') {\n      this.target.tags[index] = editorValue;\n    } else {\n      this.target.tags.push(editorValue);\n      this.state.tagRow.tags.push({selected: false});\n    }\n    if (typeof this.segments.tagEditor.editIndex !== 'undefined') {\n      this.state.tagRow.tags[this.segments.tagEditor.editIndex].selected = false;\n    }\n    this.state.tagRow.isEdit = false;\n    this.state.tagRow.canAdd = true;\n    this.segments.tagEditor.key = '';\n    this.segments.tagEditor.value = '';\n    this.refresh();\n  }\n\n  removeAllTags() {\n    this.closeTagEditor();\n    this.target.tags.length = 0;\n    this.refresh();\n  }\n\n  showTagEditor(index) {\n    if (typeof index !== 'undefined') {\n      this.segments.tagEditor.key = this.target.tags[index].key;\n      this.segments.tagEditor.value = this.target.tags[index].value;\n      this.state.tagRow.tags[index].isEdit = true;\n    }\n    this.segments.tagEditor.editIndex = index;\n    this.state.tagRow.isEdit = true;\n    this.state.tagRow.canAdd = false;\n    this.state.tagRow.isEdit = true;\n    this.suggestTags();\n  }\n\n  closeTagEditor() {\n    if (typeof this.segments.tagEditor.editIndex !== 'undefined') {\n      this.state.tagRow.tags[this.segments.tagEditor.editIndex].selected = false;\n    }\n    this.state.tagRow.isEdit = false;\n    this.state.tagRow.canAdd = true;\n    this.segments.tagEditor.key = '';\n    this.segments.tagEditor.value = '';\n  }\n\n  suggestTags() {\n    if (this.target.metric) {\n      const params = {\n        entity: undefined,\n      };\n      if (this.target.entity) {\n        params.entity = this.target.entity;\n      }\n      this.datasource.getMetricSeries(this.target.metric, params).then(series => {\n        this.suggest.tags.keys.length = 0;\n        this.suggest.tags.values.length = 0;\n        series.forEach(item => {\n          for (const key in item.tags) {\n            if (this.suggest.tags.keys.indexOf(key) === -1) {\n              this.suggest.tags.keys.push(key);\n            }\n            const value = item.tags[key];\n            if (this.suggest.tags.values.indexOf(value) === -1) {\n              if (this.segments.tagEditor.key) {\n                if (\n                  key === this.segments.tagEditor.key &&\n                  item.metric === this.target.metric &&\n                  item.entity === this.target.entity\n                ) {\n                  this.suggest.tags.values.push(value);\n                }\n              } else {\n                this.suggest.tags.values.push(value);\n              }\n            }\n          }\n        });\n      });\n    }\n  }\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__6__;","export class ChangeMyNameConfigCtrl {\n  static templateUrl = 'partials/config.html';\n  current: any;\n\n  constructor($scope) {\n  }\n}\n"],"sourceRoot":""}