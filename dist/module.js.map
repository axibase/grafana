{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///./module.ts","webpack:///./datasource.ts","webpack:///./convertutils.ts","webpack:///./atsd_client.ts","webpack:///./query_ctrl.ts","webpack:///external \"app/plugins/sdk\"","webpack:///./config_ctrl.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_EXTERNAL_MODULE__0__","_query_ctrl","_config_ctrl","ChangeMyNameAnnotationsQueryCtrl","templateUrl","Datasource","_datasource2","default","QueryCtrl","AtsdQueryCtrl","ConfigCtrl","ChangeMyNameConfigCtrl","AnnotationsQueryCtrl","_convertutils","_atsd_client","DatasourceType","undefined","AtsdDatasource","instanceSettings","backendSrv","templateSrv","$q","this","client","AtsdClient","proxyUrl","url","basicAuth","$inject","_this","_version","_a","configurable","query","options","start","_convertToAtsdTime","range","from","end","to","qs","_lodash2","each","targets","target","disconnect","push","_convertTargetToQuery","queries","compact","isEmpty","defer","resolve","data","promise","groupByTags","tags","val","_performTimeSeriesQuery","then","response","result","filter","keys","map","k","every","v","_transformMetricData","sort","a","b","nameA","toLowerCase","nameB","tsQueries","entity","metric","implicit","tagCombos","group","en","tags_1","startDate","endDate","limit","table","timeFormat","aggregate","aggregation","length","querySeries","catch","resp","console","log","getEntities","entities","getMetrics","metrics","getMetricSeries","metricSeries","getVersion","version","getTables","entityName","tables","testDatasource","status","message","title","hide","replace","type","convertTags","_convertToSeconds","_parsePeriod","date","Date","_datemath","parse","toISOString","period","count","unit","metricData","dps","item","datapoints","interval","grafanaTags","forEach","transport","baseSettings","tableName","method","params","baseRequest","arr","Array","Error","metricName","q","datasourceRequest","mixinBaseOptions","cOptions","request","__assign","headers","fullUrl","part","substr","BASE_URL","_super","$scope","$injector","suggest","types","aggregateOptions","units","unitOptions","values","segments","tagEditor","editIndex","state","isLoaded","showAggregation","tagRow","isEdit","canAdd","model","_typeof","selected","datasource","err","buildInfo","hbaseVersion","commaPos","indexOf","entityBlur","__extends","refresh","_i","aggregateTypes","label","toUpperCase","fetchSuggestMetric","tableBlur","suggestTags","metricBlur","tagRemove","index","splice","tagEdit","tagMouseover","tagMouseleave","saveTag","editorValue","removeAllTags","closeTagEditor","showTagEditor","series"],"mappings":"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","file":"module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import AtsdDatasource from './datasource';\nimport {AtsdQueryCtrl} from './query_ctrl';\nimport {ChangeMyNameConfigCtrl} from './config_ctrl';\n\nclass ChangeMyNameAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  AtsdDatasource as Datasource,\n  AtsdQueryCtrl as QueryCtrl,\n  ChangeMyNameConfigCtrl as ConfigCtrl,\n  ChangeMyNameAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\nimport {\n  _convertToAtsdTime,\n  _convertToSeconds,\n  _parsePeriod,\n  _transformMetricData,\n  convertTags,\n} from './convertutils';\nimport {BackendSrv} from 'grafana/app/core/services/backend_srv';\nimport {AtsdClient, AtsdVersion, Entity, Table} from './atsd_client';\n\nexport enum DatasourceType {\n  ATSD,\n  AS,\n}\n\nexport default class AtsdDatasource {\n  get version(): AtsdVersion {\n    if (this._version) {\n      return this._version;\n    }\n    (async () => {\n      this._version = await this.client.version();\n    })();\n    return this._version;\n  }\n\n  private readonly client: AtsdClient;\n  private _version: AtsdVersion;\n\n  /** @ngInject */\n  constructor(\n    instanceSettings,\n    private backendSrv: BackendSrv,\n    private templateSrv,\n    private $q\n  ) {\n    this.client = new AtsdClient(this.backendSrv, {\n      proxyUrl: instanceSettings.url,\n      basicAuth: instanceSettings.basicAuth,\n    });\n  }\n\n  query(options) {\n    const start = _convertToAtsdTime(options.range.from);\n    const end = _convertToAtsdTime(options.range.to);\n    const qs: any[] = [];\n\n    _.each(options.targets, target => {\n      target.disconnect = options.targets[0].disconnect;\n      qs.push(this._convertTargetToQuery(target));\n    });\n\n    const queries = _.compact(qs);\n\n    if (_.isEmpty(queries)) {\n      const d = this.$q.defer();\n      d.resolve({data: []});\n      return d.promise;\n    }\n\n    const groupByTags = {};\n\n    _.each(queries, query => {\n      _.each(query.tags, (val, key) => {\n        groupByTags[key] = true;\n      });\n    });\n\n    return this._performTimeSeriesQuery(queries, start, end).then(response => {\n      if (response.data === undefined) {\n        return {data: []};\n      }\n      const result = response.data\n        .filter(\n          s =>\n            s &&\n            s.tags &&\n            !Object.keys(s.tags)\n              .map(k => s.tags[k])\n              .every(v => v === '*')\n        )\n        .map(_transformMetricData);\n      result.sort((a, b) => {\n        const nameA = a.target.toLowerCase();\n        const nameB = b.target.toLowerCase();\n\n        if (nameA < nameB) {\n          return -1;\n        } else if (nameA > nameB) {\n          return 1;\n        } else {\n          return 0;\n        }\n      });\n      return {data: result};\n    });\n  }\n\n  private _performTimeSeriesQuery(queries, start, end) {\n    const tsQueries: any[] = [];\n    _.each(queries, query => {\n      if (query.entity !== '' && query.metric !== '') {\n        if (query.implicit) {\n          if (query.tagCombos !== undefined) {\n            _.each(query.tagCombos, group => {\n              if (group.en) {\n                const tags = {};\n\n                _.each(group.data, (value, key) => {\n                  tags[key] = [value];\n                });\n\n                tsQueries.push({\n                  startDate: start,\n                  endDate: end,\n                  limit: 10000,\n                  entity: query.entity,\n                  metric: query.table ? `${query.table},${query.metric}` : query.metric,\n                  tags: tags,\n                  timeFormat: 'milliseconds',\n                  aggregate: query.aggregation,\n                });\n              }\n            });\n          }\n        } else {\n          const tags = {};\n\n          for (const k in query.tags) {\n            tags[k] = query.tags[k];\n          }\n\n          tsQueries.push({\n            startDate: start,\n            endDate: end,\n            limit: 10000,\n            entity: query.entity,\n            metric: query.table ? `${query.table},${query.metric}` : query.metric,\n            tags: tags,\n            timeFormat: 'milliseconds',\n            aggregate: query.aggregation,\n          });\n        }\n      }\n    });\n\n    if (tsQueries.length === 0) {\n      const d = this.$q.defer();\n      d.resolve({data: undefined});\n      return d.promise;\n    }\n\n    return this.client.querySeries(tsQueries).catch(resp => console.log(resp.data));\n  }\n\n  getEntities(): Promise<Array<Entity>> {\n    return this.client.entities();\n  }\n\n  getMetrics(entity: string, table?: string) {\n    return this.client.metrics(entity, table);\n  }\n\n  getMetricSeries(metric) {\n    return this.client.metricSeries(metric);\n  }\n\n  getVersion() {\n    return this.client.version();\n  }\n\n  getTables(entityName): Promise<Table[]> {\n    return this.client.tables(entityName);\n  }\n\n  testDatasource() {\n    return this.client.version().then(() => ({\n      status: 'success',\n      message: 'Data source is working',\n      title: 'Success',\n    }));\n  }\n\n  private _convertTargetToQuery(target) {\n    if (!target.metric || !target.entity || target.hide) {\n      return null;\n    }\n    return {\n      entity: this.templateSrv.replace(target.entity),\n      metric: this.templateSrv.replace(target.metric),\n      aggregation: target.aggregation.type !== undefined ? target.aggregation : undefined,\n      tags: convertTags(target.tags),\n      disconnect:\n        target.disconnect !== undefined && target.disconnect !== ''\n          ? _convertToSeconds(_parsePeriod(target.disconnect))\n          : 24 * 60 * 60,\n    };\n  }\n}\n","import {parse} from 'grafana/app/core/utils/datemath';\nimport _ from 'lodash';\n\nexport function _convertToAtsdTime(date: any) {\n  date = date !== 'now' ? date : new Date();\n  date = parse(date);\n\n  return date.toISOString();\n}\n\nexport function _parsePeriod(period) {\n  return {count: period.count, unit: period.unit};\n}\n\nexport function _transformMetricData(metricData) {\n  const dps = _.map(metricData.data, function(item) {\n    return [item.v, item.t];\n  });\n  let name = metricData.entity + ': ' + metricData.metric;\n  _.each(metricData.tags, (value, key) => {\n    name += `, ${key}=${value}`;\n  });\n  return {target: name, datapoints: dps};\n}\n\nexport function _convertToSeconds(interval) {\n  let count = interval.count;\n\n  switch (interval.unit) {\n    case 'YEAR':\n      count *= 365 * 24 * 60 * 60;\n      break;\n    case 'MONTH':\n      count *= 30 * 24 * 60 * 60;\n      break;\n    case 'WEEK':\n      count *= 7 * 24 * 60 * 60;\n      break;\n    case 'DAY':\n      count *= 24 * 60 * 60;\n      break;\n    case 'HOUR':\n      count *= 60 * 60;\n      break;\n    case 'MINUTE':\n      count *= 60;\n      break;\n    case 'SECOND':\n      break;\n    default:\n      count = 0;\n  }\n\n  return count;\n}\n\nexport interface GrafanaTag {\n  key: string;\n  value: string;\n}\n\nexport function convertTags(grafanaTags: Array<GrafanaTag>) {\n  const tags = {};\n  grafanaTags.forEach(item => {\n    if (tags[item.key]) {\n      tags[item.key].push(item.value);\n    } else {\n      tags[item.key] = [item.value];\n    }\n  });\n  return tags;\n}\n","export interface HttpTransport {\n  get(url: any, params?: any): any;\n\n  delete(url: any): any;\n\n  post(url: any, data: any): any;\n\n  patch(url: any, data: any): any;\n\n  put(url: any, data: any): any;\n\n  request(options: any): any;\n\n  datasourceRequest(options: any): any;\n}\n\ninterface Metric {\n  name: string;\n}\n\nexport interface Entity {\n  name: string;\n}\n\nexport interface Table {\n  name: string;\n}\n\ninterface BaseSettings {\n  basicAuth: string;\n  proxyUrl: string;\n}\n\nexport interface AtsdVersion {\n  buildInfo: {\n    revisionNumber: string;\n    hbaseVersion?: string;\n  };\n}\n\nexport interface SeriesFilter {\n  entity: string;\n  metric: string;\n  startDate: string;\n  endDate: string;\n  limit: number;\n  tags?: {[key: string]: string[]};\n  timeFormat: string;\n  aggregate: any;\n}\n\nexport interface Series {}\n\nexport class AtsdClient {\n  private static readonly BASE_URL = 'api/v1/';\n\n  constructor(private transport: HttpTransport, private baseSettings: BaseSettings) {}\n\n  metrics(entityName: string, tableName?: string): Promise<Array<Metric>> {\n    const options = {\n      method: 'GET',\n      url: `entities/${entityName}/metrics`,\n      params: tableName ? {table: tableName} : undefined,\n    };\n    return this.baseRequest(options).then(arr => (arr instanceof Array ? arr : []));\n  }\n\n  entities(): Promise<Array<Entity>> {\n    return this.baseRequest({\n      method: 'GET',\n      url: `entities`,\n    }).then(arr => (arr instanceof Array ? arr : []));\n  }\n\n  version(): Promise<AtsdVersion> {\n    return this.baseRequest({\n      method: 'GET',\n      url: 'version',\n    }).catch(() => {\n      throw new Error('Failed to execute test query!');\n    });\n  }\n\n  metricSeries(metricName): Promise<any> {\n    return this.baseRequest({\n      method: 'GET',\n      url: `metrics/${metricName}/series`,\n    }).then(arr => (arr instanceof Array ? arr : []));\n  }\n\n  querySeries(q: any[]): Promise<any[]> {\n    return this.transport.datasourceRequest(\n      this.mixinBaseOptions({\n        url: 'series/query',\n        method: 'POST',\n        data: q,\n      })\n    );\n  }\n\n  tables(entityName: string): Promise<Table[]> {\n    return this.baseRequest({\n      method: 'GET',\n      url: `entities/${entityName}/tables`,\n    }).then(arr => (arr instanceof Array ? arr : []));\n  }\n\n  private baseRequest(options): Promise<any> {\n    const cOptions = this.mixinBaseOptions(options);\n    return this.transport.request(cOptions).then(resp => {\n      return resp;\n    });\n  }\n\n  private mixinBaseOptions(options) {\n    return {\n      ...options,\n      headers: {\n        basicAuth: this.baseSettings.basicAuth,\n      },\n      url: this.fullUrl(options.url),\n    };\n  }\n\n  private fullUrl(part) {\n    const url = this.baseSettings.proxyUrl;\n    const fullUrl = url[url.length - 1] !== '/' ? `${url}/` : url;\n    if (!(part.length <= 0 || part[0] !== '/')) {\n      part = part.substr(1, part.length - 1);\n    }\n    return fullUrl + AtsdClient.BASE_URL + part;\n  }\n}\n","import _ from 'lodash';\nimport {QueryCtrl} from 'grafana/app/plugins/sdk';\n\ninterface Suggestion {\n  metrics: string[];\n  entities: string[];\n  tables: string[];\n  aggregation: {\n    types: any;\n    period: {units: any};\n  };\n  tags: {\n    keys: Array<any>;\n    values: any[];\n  };\n}\n\ninterface State {\n  isLoaded: boolean;\n  showAggregation?: boolean;\n  tagRow: {\n    isEdit: boolean;\n    canAdd: boolean;\n    tags: any[];\n  };\n}\n\ninterface Segment {\n  tagEditor: {\n    editIndex: number | undefined;\n    key: string | undefined;\n    value: string | undefined;\n  };\n}\n\ninterface Metric {\n  name: string;\n}\n\nexport class AtsdQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n  private suggest: Suggestion;\n  private segments: Segment;\n  private state: State;\n  private model: any;\n\n  /** @ngInject */\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    this.suggest = {\n      metrics: [],\n      entities: [],\n      tables: [],\n      aggregation: {\n        types: AtsdQueryCtrl.aggregateOptions(),\n        period: {\n          units: AtsdQueryCtrl.unitOptions(),\n        },\n      },\n      tags: {\n        keys: [],\n        values: [],\n      },\n    };\n\n    this.segments = {\n      tagEditor: {\n        editIndex: undefined,\n        key: undefined,\n        value: undefined,\n      },\n    };\n\n    this.state = {\n      isLoaded: true,\n      showAggregation: undefined,\n      tagRow: {\n        isEdit: false,\n        canAdd: true,\n        tags: [],\n      },\n    };\n\n    this.model = {...this.target};\n    this.model.table = undefined;\n    this.model.metric = undefined;\n\n    if (typeof this.model.tags !== 'object') {\n      this.model.tags = [];\n    } else {\n      for (let i = 0; i < this.model.tags.length; i++) {\n        this.state.tagRow.tags.push({selected: false});\n      }\n    }\n    this.model.entity = this.model.entity ? this.model.entity : undefined;\n    this.model.metric = this.model.metric ? this.model.metric : undefined;\n    this.model.aggregation = this.model.aggregation\n      ? this.model.aggregation\n      : {\n          type: this.suggest.aggregation.types[0].value,\n          period: {\n            count: 1,\n            unit: this.suggest.aggregation.period.units[3].value,\n          },\n        };\n\n    this.suggest.entities = [];\n    this.datasource\n      .getEntities()\n      .then(result => {\n        result.forEach(item => this.suggest.entities.push(item.name));\n        this.state.isLoaded = false;\n      })\n      .catch(err => console.log(err));\n    this.datasource.getVersion().then(v => {\n      this.state.showAggregation = !!v.buildInfo.hbaseVersion;\n      if (!this.state.showAggregation) {\n        this.model.aggregation = {\n          type: this.suggest.aggregation.types[0].value,\n          period: {\n            count: 1,\n            unit: this.suggest.aggregation.period.units[3].value,\n          },\n        };\n      }\n      if (this.model.entity) {\n        if (this.state.showAggregation) {\n          this.model.metric = this.target.metric;\n        } else {\n          const commaPos = this.target.metric.indexOf(',');\n          if (commaPos > -1) {\n            this.model.table = this.target.metric.substr(0, commaPos);\n            this.model.metric = this.target.metric.substr(commaPos + 1);\n          } else {\n            this.model.metric = this.target.metric;\n          }\n        }\n        this.entityBlur();\n      }\n    });\n  }\n\n  refresh() {\n    for (const k of Object.keys(this.model)) {\n      this.target[k] = this.model[k];\n    }\n    this.target.metric =\n      this.model.metric && this.model.table\n        ? `${this.model.table},${this.model.metric}`\n        : this.model.metric;\n    super.refresh();\n  }\n\n  private static aggregateOptions() {\n    const aggregateTypes = [\n      undefined,\n      'Count',\n      'Min',\n      'Max',\n      'Avg',\n      'Median',\n      'Sum',\n      'Percentile_999',\n      'Percentile_995',\n      'Percentile_99',\n      'Percentile_95',\n      'Percentile_90',\n      'Percentile_75',\n      'First',\n      'Last',\n      'Delta',\n      'Wavg',\n      'Wtavg',\n      'Standard_deviation',\n    ];\n    return _.map(aggregateTypes, item =>\n      item\n        ? {\n            label: item,\n            value: item.toUpperCase(),\n          }\n        : {\n            label: 'None',\n            value: item,\n          }\n    );\n  }\n\n  private static unitOptions() {\n    return [\n      {\n        label: 'MILLISECOND',\n        value: 'MILLISECOND',\n      },\n      {\n        label: 'SECOND',\n        value: 'SECOND',\n      },\n      {\n        label: 'MINUTE',\n        value: 'MINUTE',\n      },\n      {\n        label: 'HOUR',\n        value: 'HOUR',\n      },\n      {\n        label: 'DAY',\n        value: 'DAY',\n      },\n      {\n        label: 'WEEK',\n        value: 'WEEK',\n      },\n      {\n        label: 'MONTH',\n        value: 'MONTH',\n      },\n      {\n        label: 'QUARTER',\n        value: 'QUARTER',\n      },\n      {\n        label: 'YEAR',\n        value: 'YEAR',\n      },\n    ];\n  }\n\n  entityBlur() {\n    this.refresh();\n    if (this.model.entity) {\n      if (this.state.showAggregation !== undefined) {\n        if (this.state.showAggregation) {\n        } else {\n          this.datasource.getTables(this.model.entity).then(tables => {\n            this.suggest.tables = tables.map(t => t.name);\n            this.suggest.metrics = [];\n          });\n        }\n        this.fetchSuggestMetric();\n      }\n    }\n  }\n\n  private fetchSuggestMetric() {\n    this.datasource\n      .getMetrics(this.model.entity, this.model.table)\n      .then((result: Array<Metric>) => {\n        this.suggest.metrics = result.map(m => m.name);\n        if (this.state.showAggregation === false && this.model.table) {\n          this.suggest.metrics = this.suggest.metrics.map(name =>\n            name.substr(this.model.table.length + 1)\n          );\n        }\n      });\n  }\n\n  tableBlur() {\n    this.fetchSuggestMetric();\n    this.refresh();\n    this.suggestTags();\n  }\n\n  metricBlur() {\n    this.refresh();\n    this.suggestTags();\n  }\n\n  tagRemove(index) {\n    this.model.tags.splice(index, 1);\n    this.segments.tagEditor.editIndex = undefined;\n    this.refresh();\n  }\n\n  tagEdit(index) {\n    this.segments.tagEditor.editIndex = index;\n    this.segments.tagEditor.key = this.model.tags[index].key;\n    this.segments.tagEditor.value = this.model.tags[index].value;\n    this.state.tagRow.tags[index].isEdit = true;\n    this.state.tagRow.isEdit = true;\n    this.state.tagRow.isEdit = true;\n  }\n\n  tagMouseover(index) {\n    if (!this.state.tagRow.isEdit) {\n      this.state.tagRow.tags[index].selected = true;\n    }\n  }\n\n  tagMouseleave(index) {\n    if (!this.state.tagRow.isEdit) {\n      this.state.tagRow.tags[index].selected = false;\n    }\n  }\n\n  saveTag() {\n    const editorValue = {\n      key: this.segments.tagEditor.key,\n      value: this.segments.tagEditor.value,\n    };\n    const index = this.segments.tagEditor.editIndex;\n    if (typeof index !== 'undefined') {\n      this.model.tags[index] = editorValue;\n    } else {\n      this.model.tags.push(editorValue);\n      this.state.tagRow.tags.push({selected: false});\n    }\n    if (typeof this.segments.tagEditor.editIndex !== 'undefined') {\n      this.state.tagRow.tags[this.segments.tagEditor.editIndex].selected = false;\n    }\n    this.state.tagRow.isEdit = false;\n    this.state.tagRow.canAdd = true;\n    this.segments.tagEditor.key = '';\n    this.segments.tagEditor.value = '';\n    this.refresh();\n  }\n\n  removeAllTags() {\n    this.closeTagEditor();\n    this.model.tags.length = 0;\n    this.refresh();\n  }\n\n  showTagEditor(index) {\n    if (typeof index !== 'undefined') {\n      this.segments.tagEditor.key = this.model.tags[index].key;\n      this.segments.tagEditor.value = this.model.tags[index].value;\n      this.state.tagRow.tags[index].isEdit = true;\n    }\n    this.segments.tagEditor.editIndex = index;\n    this.state.tagRow.isEdit = true;\n    this.state.tagRow.canAdd = false;\n    this.state.tagRow.isEdit = true;\n    this.suggestTags();\n  }\n\n  closeTagEditor() {\n    if (typeof this.segments.tagEditor.editIndex !== 'undefined') {\n      this.state.tagRow.tags[this.segments.tagEditor.editIndex].selected = false;\n    }\n    this.state.tagRow.isEdit = false;\n    this.state.tagRow.canAdd = true;\n    this.segments.tagEditor.key = '';\n    this.segments.tagEditor.value = '';\n  }\n\n  suggestTags() {\n    if (this.model.metric) {\n      const params = {\n        entity: undefined,\n      };\n      if (this.model.entity) {\n        params.entity = this.model.entity;\n      }\n      this.datasource.getMetricSeries(this.model.metric).then(series => {\n        this.suggest.tags.keys.length = 0;\n        this.suggest.tags.values.length = 0;\n        series.forEach(item => {\n          for (const key in item.tags) {\n            if (this.suggest.tags.keys.indexOf(key) === -1) {\n              this.suggest.tags.keys.push(key);\n            }\n            const value = item.tags[key];\n            if (this.suggest.tags.values.indexOf(value) === -1) {\n              if (this.segments.tagEditor.key) {\n                if (\n                  key === this.segments.tagEditor.key &&\n                  item.metric === this.model.metric &&\n                  item.entity === this.model.entity\n                ) {\n                  this.suggest.tags.values.push(value);\n                }\n              } else {\n                this.suggest.tags.values.push(value);\n              }\n            }\n          }\n        });\n      });\n    }\n  }\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","export class ChangeMyNameConfigCtrl {\n  static templateUrl = 'partials/config.html';\n  current: any;\n\n  constructor($scope) {}\n}\n"],"sourceRoot":""}